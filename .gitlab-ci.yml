image: "debian:sid"

before_script:
  - apt-get update
  - apt-get -y install git clang cmake libcmocka0 libcmocka-dev valgrind libsystemd-dev

  # prepare for building debian packages
  #- apt-get -y install git build-essential fakeroot devscripts

  # TODO: when libyang2 is available in Debian unstable
  - git clone --depth=1 https://github.com/CESNET/libyang -b devel && cd libyang
  - cmake .. && make
  - sudo make install
  #- mk-build-deps --install --tool 'apt-get --yes --no-install-recommends' --remove
  #- dpkg-buildpackage -j$(nproc) --build=binary --root-command=fakeroot --unsigned-source --unsigned-changes
  #- (dpkg -i ../libyang2*.deb || apt-get -y install -f) && cd ..

  # TODO: when libyang2 is available in Debian unstable
  - git clone --depth=1 https://github.com/sysrepo/sysrepo -b devel && cd sysrepo
  - cmake .. && make
  - sudo make install
  #- mk-build-deps --install --tool 'apt-get --yes --no-install-recommends' --remove
  #- dpkg-buildpackage -j$(nproc) --build=binary --root-command=fakeroot --unsigned-source --unsigned-changes
  #- (dpkg -i ../sysrepo*.deb ../libsysrepo*.deb || apt-get -y install -f) && cd ..

  # resolve time issues
  - ln -snf /usr/share/zoneinfo/Europe/Zagreb /etc/localtime && echo 'Europe/Zagreb' > /etc/timezone

stages:
  - build
  - test

build:default:
  stage: build
  script:
    - mkdir build && cd build
    - CC=clang cmake -DENABLE_BUILD_TESTS=ON -DSYSTEMD_IFINDEX=1 ..
    - make
  artifacts:
    paths:
      - build/

build:sanitized:
  stage: build
  script:
    - mkdir build_sanitized && cd build_sanitized
    - CC=clang cmake -DCMAKE_C_FLAGS=\"-fsanitize=address,undefined\" -DENABLE_SANITIZER=ON -DSYSTEMD_IFINDEX=1 ..
    - make
  artifacts:
    paths:
      - build_sanitized/

build:sanitized_memory:
  stage: build
  script:
    - mkdir build_sanitized_memory && cd build_sanitized_memory
    - CC=clang cmake -DCMAKE_C_FLAGS=\"-fsanitize=memory\" -DENABLE_SANITIZER=ON -DSYSTEMD_IFINDEX=1 ..
    - make
  artifacts:
    paths:
      - build_sanitized_memory/

test:default:
  stage: test
  needs: ["build:default"]
  script:
    - cd build
    - ctest -T test --output-on-failure
  artifacts:
    paths:
      - build/

test:sanitized:
  stage: test
  needs: ["build:sanitized"]
  script:
    - cd build_sanitized
    - ctest -T test --output-on-failure
  artifacts:
    paths:
      - build_sanitized/

test:sanitized_memory:
  stage: test
  needs: ["build:sanitized_memory"]
  script:
    - cd build_sanitized_memory
    - ctest -T test --output-on-failure
  artifacts:
    paths:
      - build_sanitized_memory/

test:valgrind:
  stage: test
  needs: ["build:default"]
  script:
    - cd build
    - ctest -T memcheck
  artifacts:
    paths:
      - build/
